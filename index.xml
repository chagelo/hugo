<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chagelo</title>
    <link>https://chagelo.github.io/hugo/</link>
    <description>Recent content on chagelo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Copyright © 2008–2019</copyright>
    <lastBuildDate>Sat, 11 Dec 2021 22:38:53 +0800</lastBuildDate>
    
	<atom:link href="https://chagelo.github.io/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Summary of DL Based MRI Artifacts Reduction Methods</title>
      <link>https://chagelo.github.io/hugo/post/summary-of-dl-based-mri-artifacts-reduction-methods/</link>
      <pubDate>Sat, 11 Dec 2021 22:38:53 +0800</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/summary-of-dl-based-mri-artifacts-reduction-methods/</guid>
      <description>&lt;h2 id=&#34;dagan&#34;&gt;DAGAN&lt;/h2&gt;
&lt;p&gt;paper: Deep De-Aliasing for Fast Compressive Sensing MRI&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/dagan.png&#34;&gt;
&lt;/center&gt;
&lt;p&gt;如上图，$x_u$文中说是 zero-filling undersampling k-space measurement 的重建，应该是加了噪声。文中实验给出了加上一维高斯噪声和二维高斯噪声的结果。$x_t$是完整测量重建的结果。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contrastive Learning for Unpaired Image Translation</title>
      <link>https://chagelo.github.io/hugo/post/contrastive-learning-for-unpaired-image-translation/</link>
      <pubDate>Sun, 28 Nov 2021 21:05:35 +0800</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/contrastive-learning-for-unpaired-image-translation/</guid>
      <description>&lt;h2 id=&#34;abstract&#34;&gt;abstract&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1703.10593&#34;&gt;cyclegan&lt;/a&gt; 不可否认是一个很优秀的模型，然而它也有一个很大的缺陷，它要求 translation 必须可逆。&lt;a href=&#34;https://arxiv.org/abs/2003.04858&#34;&gt;aclgan&lt;/a&gt; 中提出了一个种 loss 解决这个问题，这里。&lt;/p&gt;
&lt;p&gt;本片文章中提出使用对比学习解决这个问题。他们使用一种基于 patch 的方法，而并非考虑对整张图片进行操作。这个方法考虑输入图片 patch 和生成输出图片对应位置 patch，希望两个关联的 patch 能够映射到学习到的 feature space 中的同一个点（通过对比学习）。&lt;/p&gt;
&lt;p&gt;作者验证了该方法对于单向的 translation 是优秀的，提高了图片并且减少了训练时间。&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;introduction&lt;/h2&gt;
&lt;p&gt;对于 image translation，它从一个 domain 转换到另一个 domain，我们想要它的结构和内容不改变，这是一个 disentanglement problem，输出图片通过对抗 loss 来约束，同时使用 cycle-consistency 来保留内容，然而它有个前提就是两个 domain 之间的转换是双射，这由具体的任务所决定，这个条件非常具有限制性，或者说很严格。&lt;/p&gt;
&lt;p&gt;这篇文章的方法很直接，来保持每一对输入输出 patch 内容的关联性，让他们所拥有的公共信息更多（比如形状，动物的纹理，或者说动物的外观，目标物）。他们通过训练一个 encoder 来实现，encoder 关注两个 domain 的共同点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;In this paper, we propose an alternative, rather straightforward way of maintaining correspondence in content but not appearance&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;上面这句话是文中原话，值得思考的是什么叫做&lt;code&gt;not appearance&lt;/code&gt;（每个 pixel 的 loss 相加，考虑整张图）。&lt;/p&gt;
&lt;p&gt;关于正负样本，从输入图片的其他位置取 patch 作为负样本，相比使用其他图片的 patch，能够使得结果 patch 更好的保留输入图片的内容。该方法不需要 memory bank 或者 特殊的结构（如 &lt;a href=&#34;https://arxiv.org/abs/1905.09272&#34;&gt;Data-efficient image recognition with CPC&lt;/a&gt;、&lt;a href=&#34;https://arxiv.org/abs/1906.00910&#34;&gt;AMDIM&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;经作者所言，他们的模型快且轻量级，超越了两个 one-sided translation 模型（参见原文参考文献），以及一些依赖于几个 auxiliary 网络结构和很多个 loss 而达到 sota 的模型。&lt;/p&gt;
&lt;h2 id=&#34;related-work&#34;&gt;related work&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;image translation and cycle-consistency；UNIT、MUNIT 二者学习一个比较清晰的中间 content latent space；一些工作也在关注于多 domain、多模态的合成，并且提高结果质量；cycle-consitency 被使用到很多场景，（a）两个 domain（b）图片到 latent（c）latent 到图片；基于 cycle-consistency 的重建比较困难，特别是当 input domain 相比 target domain 拥有更多信息的时候；&lt;/li&gt;
&lt;li&gt;relation preservation；有一些工作如 DistanceGAN、GcGAN 等绕过 cycle-consistency 实现单向的翻译。cycle-consistency 的目的就是不希望 input domain 到 target domain 的改变太多，也就是说它也希望尽可能保留 input domain 的内容；这里方法，在 input 和 output 之间学习一个跨 domain 相似性函数；&lt;/li&gt;
&lt;li&gt;Emergent perceptual similarity in deep network embeddings；衡量高维度的数据、信号之间的感知距离在图像处理计算机视觉中是一个一直一来的问题，image translation 一般使用 l1 来衡量每个像素，这会导致模糊，且不能反映人的感知。perceptual loss、feature loss、contextual loss。&lt;/li&gt;
&lt;li&gt;Contrastive representation learning.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;method&#34;&gt;method&lt;/h2&gt;
&lt;p&gt;本文方法避免训练一个多余的 generator 和 discriminator。&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_loss2.png&#34;&gt;
&lt;/center&gt;
这个 loss 是 InforNCE Loss；
&lt;p&gt;$G_{enc}$是 generator 的 encoder，它的输出就是输入图片的 feature 的 embedding，它将其中的 encoder 中的$L$层的 feature map 拿出来，将其输入到 mlp 中。&lt;/p&gt;
&lt;p&gt;除了整张图像具有内容上的共同特征，输出和输出每个对应 patch 也具有这样的对应关系。例如：给定一张斑马的腿部的图像 patch，则其转换前的马的图像也应当是包含对应的腿部的 patch，甚至在像素级别，斑马的颜色像素也应当是对应到马的颜色像素，而不是对应到背景草地的颜色像素，因此本文应用多层的基于 Patch 的 learning objective。&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_loss1.png&#34;&gt;
&lt;/center&gt;
&lt;p&gt;它们将 encoder 的中间结果 feature map 拿出来送入到 mlp 中（利用 mlp 进行sample 一些 patches），不同 feature map 对应不同 level 的信息，不同 patch 对应不同位置。它们用这些 patches 计算 loss。（对于生成的图片 patch 包含腿部，那么对应于输入肯定希望是也是腿部，不过是马纹理不同，比如输出 patch 包含马的身体，那么希望输入 patch 不包含比如填空）不同尺度，不同位置要对应的上，因此采用 mutilayer。&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_patchnce.png&#34;&gt;
&lt;/center&gt;
&lt;p&gt;单张图片的内部的数据在分割、超分、降噪上都被证明是有效的。实验中也发现使用同一张图片的数据作为负样本，要好过使用数据集中其他图片采样作为负样本。&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_external.png&#34;&gt;
&lt;/center&gt;
&lt;p&gt;此外也考虑把数据集其他图片采样作为负样本计算 nce loss。作者还将 domainY 的图片输入 网络计算 PatchNCE Loss，这和 identity loss 很类似；&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_loss.png&#34;&gt;
&lt;/center&gt;
&lt;p&gt;令$\lambda_{X}=1,\lambda_{Y}=1$，这种配置下的网络结构叫做 CUT，而$\lambda_{X}=10,\lambda_{Y}=0$叫做 FastCUT，前者的效果非常好，后者可以看作是一种快速且轻量级的 CycleGAN。&lt;/p&gt;
&lt;p&gt;作者也有一些失败的结果，比如对于一匹后腿直立的马，由于模型识别不出这种不熟悉的姿态，导致给背景也添加上了斑马纹理。另外对于猫到狗的例子，其中有个例子凭空多了舌头。&lt;/p&gt;
&lt;h2 id=&#34;experiments&#34;&gt;Experiments&lt;/h2&gt;
&lt;p&gt;Training details，主要和 CycleGAN做对比，所以实验设置和 CycleGAN 很类似。&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_exp_baseline.png&#34;&gt;
&lt;/center&gt;
&lt;p&gt;上面的实验是 Cityscapes 数据集上的分割结果。可以看出结果比一些 baseline 要好。且速度和内存消耗比 CycleGAN 都要优秀&lt;/p&gt;
&lt;h3 id=&#34;ablation-study-and-analysis&#34;&gt;Ablation study and analysis&lt;/h3&gt;
&lt;p&gt;文中方法有很多细节，文中方法使用了 resnet-based generator（used in CycleGAN），patchnce 从输入图片采样负样本，以及从 generator 得到 encoder 提取 feature map，以及 identity loss.&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_ablation1.png&#34;&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_ablation2.png&#34;&gt;
&lt;/center&gt;
&lt;p&gt;在没有 identity loss，或仅使用 encoder 最后一层的 feature 作为 mlp 输入，或者只使用其他样本采样的负例，效果都不太行。&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_ablation3.png&#34;&gt;
&lt;/center&gt;
&lt;p&gt;identity loss 相当于一个正则项，它一定程度保证稳定性，右边那个比较明显，导致了 collapse。&lt;/p&gt;
&lt;p&gt;作者还使用 momentum encoder 来从其他图片采样负样本，使用 external and internal 负样本，效果比只使用 internal 负样本效果差。
从上面的 Cityscape 的结果可以看到一些质量的相比的下降，会有一些重复的纹理，所以从与输出图片对应的输入图片采样负样本可能是有助于保留输入图片的 content。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internal negatives are more effective than external.&lt;/li&gt;
&lt;li&gt;Importance of using multiple layers of encoder&lt;/li&gt;
&lt;li&gt;identity loss regularizer stabilizes training.&lt;/li&gt;
&lt;li&gt;Visualizing learned similarity by encoder G_enc&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;code&#34;&gt;code&lt;/h2&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_code.png&#34;&gt;
&lt;/center&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/cut_patchnce_cal.png&#34;&gt;
&lt;/center&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;conclusion&lt;/h2&gt;
&lt;p&gt;这篇文章提出一种方法用于解决 CycleGAN-consistency 的问题（translation 必须是双射）。所以对于 big object removal 或者 shape change 等，CycleGAN 做的不太行，本文方法一方面能够解决 CycleGAN 的问题，另一方面又能在总体上达到且超越 CycleGAN 的总体效果。&lt;/p&gt;
&lt;p&gt;通过使用对比学习，非常直接的考虑 input 和 output 在这个 translation 过程中必须保留内容（类似 SimCLR），而任务的令一方面 transaltion 则由 GAN 实现。相比而言它能够达到 CycleGAN 的效果，并且少训练一个 generator 和 discriminator，更加轻量级，这是它的优点。&lt;/p&gt;
&lt;p&gt;试验中也有一些失败的 case 比如对于后腿直立的马并不能很好的转换为斑马，一个原因是网络没有见过很多不同姿态的马，另一个就是 cat2dog 凭空多出了舌头（虽然人的直觉上是很好的，但这里的 translation 并不是好的），一个直觉就是 generator 和 contrastive learning 并没有 connect 的很好（比如它们 loss 的权重是不是能够调一下）。&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;reference&lt;/h2&gt;
&lt;p&gt;待阅读参考文献&lt;/p&gt;
&lt;p&gt;1.One-sided unsupervised domain mapping.
2.Geometry-
consistent generative adversarial networks for one-sided unsupervised domain map-
ping
3.自监督系列：AMDIM、Moco、SimCLR、BYOL
4.UNIT 有待再完整的读一下（MUNIT）（VAE）
5.Augmented
cyclegan: Learning many-to-many mappings from unpaired data
6.Harmonic unpaired image-to-image translation
7.TraVeLGAN、DistanceGAN、GcGAN（one-way translation）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gdb_debug</title>
      <link>https://chagelo.github.io/hugo/post/gdb_debug/</link>
      <pubDate>Wed, 17 Nov 2021 23:35:49 +0800</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/gdb_debug/</guid>
      <description>&lt;p&gt;下面的命令都可以用首字母代替；&lt;/p&gt;
&lt;!-- more --&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;break n （简写b n）:在第n行处设置断点
break func：在函数func()的入口处设置断点，如：break cb_button
delete n：删除第n个断点
info b （info breakpoints） ：显示当前程序的断点设置情况
delete breakpoints：清除所有断点：
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;b *address&lt;/code&gt;在&lt;code&gt;address&lt;/code&gt;处添加断点&lt;/p&gt;
&lt;h2 id=&#34;运行&#34;&gt;运行&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;run：简记为 r ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。
continue （简写c ）：继续执行，到下一个断点处（或运行结束）
next：（简写 n），单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。
step （简写s）：单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的，需要有断点
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看代码和输出&#34;&gt;查看代码和输出&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;list ：简记为 l ，其作用就是列出程序的源代码，默认每次显示10行。
list 行号：将显示当前文件以“行号”为中心的前后10行代码，如：list 12
list 函数名：将显示“函数名”所在函数的源代码，如：list main
print 表达式：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。
print a：将显示整数 a 的值
print/x &amp;lt;my_var&amp;gt; 用16进制表示var
i r rax: 表示rax寄存器的值
i r：表示所有寄存器的值
layout src：显示源代码窗口
layout asm：显示反汇编窗口
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;p 的使用比较复杂&lt;/p&gt;
&lt;h2 id=&#34;关于-p&#34;&gt;关于 p&lt;/h2&gt;
&lt;p&gt;p 有很多可选参数；&lt;code&gt;p/f&lt;/code&gt;表示指定格式输出，比如&lt;code&gt;x&lt;/code&gt;表示以十六进制输出，&lt;code&gt;o&lt;/code&gt;将整数以十进制输出的等等；&lt;a href=&#34;https://sourceware.org/gdb/current/onlinedocs/gdb/Output-Formats.html#Output-Formats&#34;&gt;Output-Formats&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p/x *((int *)address)&lt;/code&gt;表示以十六进制输出整数，&lt;code&gt;address&lt;/code&gt;是其存放地址；&lt;code&gt;p/s (char *)address&lt;/code&gt;表示输出首地址在&lt;code&gt;address&lt;/code&gt;的字符串；如果是结构体，类似；&lt;code&gt;p/x *address&lt;/code&gt;，会以十六进制输出&lt;code&gt;address&lt;/code&gt;位置的 4 个字节（i386）;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p/x *(int *)($esp+0x4)&lt;/code&gt;也是可行的；或者&lt;code&gt;x/w $esp+0x4&lt;/code&gt;；&lt;a href=&#34;https://stackoverflow.com/questions/5455832/how-to-print-0x4rbp-in-gdb&#34;&gt;How to print -0x4(%rbp) in gdb?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面的&lt;code&gt;x/w&lt;/code&gt;中的&lt;code&gt;x&lt;/code&gt;表示检查内存的意思，&lt;code&gt;w&lt;/code&gt;和上面类似，&lt;a href=&#34;https://sourceware.org/gdb/current/onlinedocs/gdb/Memory.html#Memory&#34;&gt;Examining Memory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;p *address@20&lt;/code&gt;访问数组的前20个元素，首地址是&lt;code&gt;address&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;reference&#34;&gt;reference&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceware.org/gdb/current/onlinedocs/gdb/&#34;&gt;Debugging with GDB&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Microhabit</title>
      <link>https://chagelo.github.io/hugo/post/microhabit/</link>
      <pubDate>Sat, 13 Nov 2021 23:45:46 +0800</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/microhabit/</guid>
      <description>&lt;h1 id=&#34;微习惯是什么&#34;&gt;微习惯是什么&lt;/h1&gt;
&lt;p&gt;首先需要明确两个事实：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果不行动，决心再大也无用；&lt;/li&gt;
&lt;li&gt;研究表明：人总会习惯性高估自己的自控力；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;并且：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;哪怕是一点点行动，也比不作为好（至少数学上是，现实生活中也是；&lt;/li&gt;
&lt;li&gt;相比一天做很多事，每天做一点的影响力更大。每天做一点就会形成习惯，久而久之，只要保持，习惯越不容易被打破；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;《米哈尔科商业创意全攻略》（Thinkertoys, Michael Michalko）讲的是创造性思维以及如何解决问题。
如果想解决一个问题，那么可以从它的对立面着手思考，看看会有什么创意迸发出来。如果想盖一座摩天大楼，就反过来想如果造一座深入地下的建筑会怎么样。这样可以强迫大脑拓宽思维，看到更多的可能性，从而激发更多创意。&lt;/p&gt;
&lt;h2 id=&#34;只为好习惯&#34;&gt;只为好习惯&lt;/h2&gt;
&lt;p&gt;通过养成更多的好习惯来边缘化一些坏习惯。&lt;/p&gt;
&lt;h2 id=&#34;微习惯&#34;&gt;微习惯&lt;/h2&gt;
&lt;p&gt;微习惯因为太小而不至于无法完成，因此就不会有消极情绪，愧疚、挫败感。&lt;/p&gt;
&lt;h1 id=&#34;大脑的工作原理&#34;&gt;大脑的工作原理&lt;/h1&gt;
&lt;p&gt;大脑是我的一切,华生。身体只是附件而已。——阿瑟·柯南·道尔,《福尔摩斯探案集》&lt;/p&gt;
&lt;p&gt;首先需要明确“多重复几遍，就不会忘记”这样一个事实。&lt;/p&gt;
&lt;p&gt;建立习惯意味着改变，而大脑会抗拒改变（一般改变需要付出代价），除非给大脑一些回报。从大脑角度看，建立和改变习惯的两个关键是重复和回报。&lt;/p&gt;
&lt;p&gt;另外，当建立习惯后，大脑能迅速作出反应，比起有意识权衡、选择、行动，更加有效率。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Program in Machine Level</title>
      <link>https://chagelo.github.io/hugo/post/program-in-machine-level/</link>
      <pubDate>Thu, 11 Nov 2021 22:23:34 +0800</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/program-in-machine-level/</guid>
      <description>&lt;h2 id=&#34;一些语法&#34;&gt;一些语法&lt;/h2&gt;
&lt;p&gt;x86-64 16个寄存器&lt;/p&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/x86_register.png&#34;&gt;
&lt;!-- more --&gt;
&lt;p&gt;注意&lt;code&gt;rax&lt;/code&gt;可以做函数返回值。&lt;/p&gt;
&lt;p&gt;AT&amp;amp;T格式汇编中，立即数表示为&lt;code&gt;$&lt;/code&gt;跟一个C标准的整数，&lt;code&gt;$-577&lt;/code&gt;或&lt;code&gt;$0x1f&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;$Imm(r_b, r_i, s)$表示的地址为$Imm+R[r_b]+R[r_i]\cdot s$&lt;/p&gt;
&lt;h3 id=&#34;指令&#34;&gt;指令&lt;/h3&gt;
&lt;p&gt;x86-64 规定&lt;code&gt;mov&lt;/code&gt;的两个操作数不能都指向内存，内存里面数据转移至少要两个指令。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;movl&lt;/code&gt;以寄存器作为目的时，会把寄存器的高位4字节置为0。x86-64的惯例，任何为寄存器生成32位值的指令都会把该寄存器的高位部分置为0。&lt;/p&gt;
&lt;p&gt;mov指令的最后一个字符需要和寄存器相互匹配。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rbp&lt;/code&gt;、&lt;code&gt;ebp&lt;/code&gt;、&lt;code&gt;bp&lt;/code&gt;、&lt;code&gt;bpl&lt;/code&gt;不能作为目的地址寄存器。&lt;/p&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/mov_instruction.png&#34;&gt;
&lt;p&gt;leaq&lt;/p&gt;
&lt;p&gt;加载有效地址，目的操作数必须是寄存器，可将将它看成&lt;code&gt;mov&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/instruction.png&#34; alt=&#34;instruction&#34;&gt;&lt;/p&gt;
&lt;p&gt;128位乘除法&lt;/p&gt;
&lt;img src =&#34;/hugo/image/mul_div.png&#34;&gt;
&lt;p&gt;&lt;code&gt;imul&lt;/code&gt;有单操作数和双操作数的指令。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;clto&lt;/code&gt;, &lt;code&gt;cqto&lt;/code&gt;都是对&lt;code&gt;%rax&lt;/code&gt;进行操作，进行符号扩展。&lt;/p&gt;
&lt;p&gt;移位&lt;/p&gt;
&lt;p&gt;在x86-64中，移位量由&lt;code&gt;%cl&lt;/code&gt;寄存器的低位决定，高位会忽略，比如对于&lt;code&gt;salq&lt;/code&gt;移位量最大是63，&lt;code&gt;%cl&lt;/code&gt;低6位决定。&lt;/p&gt;
&lt;p&gt;条件码&lt;/p&gt;
&lt;p&gt;cf: 最高位进位，检查无符号溢出
zf: 0标志
sf: 符号位，是不是负数
of: 是否溢出，正溢出或负溢出&lt;/p&gt;
&lt;p&gt;test 和 cmp&lt;/p&gt;
&lt;p&gt;test 使用两个操作数的与运算结果来测试，cmp 则是减法。注意它们的结果都是去设置条件码。&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;cmpq %rsi, %rdi&lt;/code&gt;实际上比较的是&lt;code&gt;%rdi&lt;/code&gt;和&lt;code&gt;%rsi&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;set指令&lt;/p&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/set_instruction.png&#34;&gt;
&lt;p&gt;&lt;code&gt;setg&lt;/code&gt;和&lt;code&gt;setnle&lt;/code&gt;实际上是相同指令。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;setl&lt;/code&gt;表示当小于时设置指令（根据上一步结果的条件码设置）。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;若of为0，没有溢出；a - b &amp;lt; 0, a &amp;lt; b，有sf = 1，a - b &amp;gt;=0, a &amp;gt;= b，有sf = 0，sf ^ of = 0；&lt;/li&gt;
&lt;li&gt;若of为1，a - b &amp;gt; 0（负溢出）, a &amp;lt; b，sf = 0, a - b &amp;lt; 0（正溢出）, a &amp;gt; b, sf = 1；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;条件数据传送：计算一个条件操作中的两种结果，根据条件从其中取一个；和条件转移相比，这更像一种离线操作，后者更像在线操作。&lt;/p&gt;
&lt;h3 id=&#34;数据传送&#34;&gt;数据传送&lt;/h3&gt;
&lt;p&gt;若一个P调用Q，n个参数，n &amp;gt; 6，那么P的代码分配的栈帧必须能容纳7到n号参数的存储空间，如下图所示意；&lt;/p&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/func_stack.png&#34;&gt;
&lt;p&gt;调用时先把1-6号参数复制到对应寄存器，之后其他参数放到栈中，7号在栈顶；调用时返回地址也被压入栈&lt;/p&gt;
&lt;p&gt;但是有的时候数据必须放在内存中，比如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;寄存器不足以存放所有本地数据&lt;/li&gt;
&lt;li&gt;使用了&lt;code&gt;&amp;amp;&lt;/code&gt;，就需要给它一个地址&lt;/li&gt;
&lt;li&gt;数据，结构体&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面的一个例子很好。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;/hugo/image/call_func.png&amp;gt;&lt;/p&gt;
&lt;p&gt;下面是一个更复杂的例子&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;call_proc&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// long is regard as 8 bytes;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00a8c8&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;short&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;x1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;x1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;x2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;x3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x4&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;x4&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;x1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;x3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x4&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;    call_proc:
        ; set up arguments to proc
        subq $32, %rsp  ;allocate 32byte stack frame
        movq $1, 24(%rsp)   ;store 1 in &amp;amp;x1
        movl $2, 20(%rsp)   ;store 2 in &amp;amp;x2
        movw $3, 18(%rsp)   ;store 3 in &amp;amp;x3
        movb $4, 17(%rsp)   ;store 4 in &amp;amp;x4
        leaq 17(%rsp), %rax ;create &amp;amp;x4
        movq %rax, 8(%rsp)  ;store &amp;amp;x4 as argument 8
        movl $4, (%rsp)     ;store 4 as argument 7
        leaq 18(%rsp), %r9  ;pass &amp;amp;x3 as argumen 6
        movl $3, %r8d       ;pass 3 as argument 5
        leaq 20(%rsp), %rcx ;pass &amp;amp;x2 as argument 4
        movl $2, %edx       ;pass 2 as argument 3
        leaq 24(%rsp), %rsi ;pass &amp;amp;x1 as argument 2
        movl $1, %edi       ;pass a as argument 1
        ; call proc
        call proc
        ; retrieve changes to memory
        movslq 20(%rsp), %rdx   ;get x2 and convert to long
        addq 24(%rsp), %rdx     ;compute x1 + x2
        movswl 18(%rsp), %eax   ;get x3 and convert to int
        movsbl 17(%rsp), %ecx   ;get x4 and convert to int
        subl %ecx, %eax         ;compute x3 - x4
        cltq                    ;convert to long
        imul %rdx, %rax         ;compute (x1 + x2) * (x3 - x4)
        addq $32, $rsp          ;deallocate stack frame
        ret                     ;return
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于x1, x2, x3, x4都用到了地址，所以都分配了内存空间，对于函数调用，需要将前6个参数送到寄存器，除此6个参数外的两个参数需要在内存中分配空间，因此x4的地址也要存储，而不能想直接使用x4的地址。栈底的一部分参数（比如4个变量）我感觉是属于调用函数的栈帧，而后面靠近栈顶的是属于被调用函数proc的栈帧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;被调用者保存寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;img src =&#34;/hugo/image/call_proc_stack.png&#34;&gt;
&lt;p&gt;寄存器&lt;code&gt;%rbx&lt;/code&gt;、&lt;code&gt;%rbp&lt;/code&gt;和&lt;code&gt;%r12~%r15&lt;/code&gt;被看作是被调用者寄存器，当P调用Q时，Q必须保存这些寄存器的值，而Q要么一直不动这些寄存器，要么把这些值入栈。&lt;/p&gt;
&lt;p&gt;如果一个寄存器被标识为“Caller Save”， 那么在进行子函数调用前，就需要由调用者提前保存好这些寄存器的值，保存方法通常是把寄存器的值压入堆栈中，调用者保存完成后，在被调用者（子函数）中就可以随意覆盖这些寄存器的值了。如果一个寄存被标识为“Callee Save”，那么在函数调用时，调用者就不必保存这些寄存器的值而直接进行子函数调用，进入子函数后，子函数在覆盖这些寄存器之前，需要先保存这些寄存器的值，即这些寄存器的值是由被调用者来保存和恢复的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%rbp&lt;/code&gt;通常指示当前栈帧的起始位置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;P&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;Q&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;    ; x in %rdi, y in %rsi
    P:
        pushq %rbp  ; save %rbp
        pushq %rbx  ; save %rbx
        subq $8, %rsp   ; align stack frame
        movq %rdi, %rbp ; save x
        movq %rsi, %rdi ; move y to first argument
        call Q          ; call Q(y)
        movq %rax, %rbx ; save u = Q(y)
        movq %rbp, %rdi ; move x to first argument
        call Q          ; call Q(x)
        addq %rdx, %rax ; u + v
        addq $8, %rsp   ; deallocate last part of stack
        popq %rbx       ; retore %rbx
        popq %rbp       ; resore %rbp
        ret     
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;前两条&lt;code&gt;push&lt;/code&gt;保存之前被调用者寄存器到栈中（此时P是被调用者）；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gcc 优化访问数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;$$D[i][j] = x_D + L(C\cdot i + j$$&lt;/p&gt;
&lt;p&gt;在访问元素的时候，访问地址，然后访问某个元素，假如编译器不作优化，那么访问一个数组的一行元素，没访问一次就需要拿行元素个数乘以元素大小，不考虑实际运算，也会耗费很多乘法操作，乘法貌似很昂贵？因此编译器优化会尽可能不使用额外的乘法运算。&lt;/p&gt;
&lt;h2 id=&#34;与-i38632bit-区别&#34;&gt;与 i386（32bit） 区别&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;i386 只有前 8 个寄存器，且只有 32 位；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参数传递：x86-64 基本使用寄存器传递参数，寄存器不够使用栈，i386 将参数放入栈中，第一个参数放在栈顶&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在被调用函数内部，函数返回值前，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将返回值存到&lt;code&gt;%eax&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将栈顶置为未调用之前的状态（也就是恢复调用者的栈顶），&lt;code&gt;movl %ebp, %esp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;恢复调用者的栈底，&lt;code&gt;popl %ebp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ret&lt;/code&gt;返回&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在函数内部，刚刚调用时&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数返回地址入栈&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;%ebp&lt;/code&gt;入栈，也就是在调用函数的栈帧的底部地址入栈&lt;/li&gt;
&lt;li&gt;可能会有将其他寄存器内容入栈，进行保护；&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;%esp&lt;/code&gt;分配局部变量；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;i386 中 2、3 两部通过&lt;code&gt;leave&lt;/code&gt;实现；&lt;/p&gt;
&lt;center&gt;
&lt;img src=&#34;https://chagelo.github.io/hugo/hugo/image/i386_fcall_stack.png&#34;&gt;
&lt;/center&gt;</description>
    </item>
    
    <item>
      <title>Hugo Install</title>
      <link>https://chagelo.github.io/hugo/post/hugo-install/</link>
      <pubDate>Fri, 10 Sep 2021 21:25:17 +0800</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/hugo-install/</guid>
      <description>&lt;h1 id=&#34;manjaro下安装hugo&#34;&gt;manjaro下安装hugo&lt;/h1&gt;
&lt;h2 id=&#34;安装hugo&#34;&gt;安装hugo&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo pacman -Sy hugo
&lt;span style=&#34;color:#75715e&#34;&gt;# 本地new一个存放hugo数据的文件夹，并进行初始化&lt;/span&gt;
hugo new site ~/hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;!-- more --&gt;
&lt;h2 id=&#34;主题&#34;&gt;主题&lt;/h2&gt;
&lt;h3 id=&#34;下载&#34;&gt;下载&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;cd&lt;/span&gt; hugo
git init
git submodule add https://github.com/heyeshuang/hugo-theme-tokiwa.git themes/hugo-theme-tokiwa
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;主题调整&#34;&gt;主题调整&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#111&#34;&gt;cd&lt;/span&gt; hugo &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#在hugo/content创建post&lt;/span&gt;
hugo new post/hugo-install.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>[SPOJ NO GCD]</title>
      <link>https://chagelo.github.io/hugo/post/spoj-no-gcd/</link>
      <pubDate>Wed, 25 Sep 2019 17:24:45 +0000</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/spoj-no-gcd/</guid>
      <description>&lt;h3 id=&#34;链接&#34;&gt;链接&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://vjudge.net/problem/SPOJ-NGCD&#34;&gt;$\text{SPOJ - NO GCD}$&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;题意&#34;&gt;题意&lt;/h3&gt;
&lt;p&gt;  给你一个长度为$n$的序列$a$，并且对于任意一个数$a[i]$，它只有小于$50$的素因子，且不含有平方因子，求有多少对$(i,j)$，使得$a[i]和a[j]$互质，或者$gcd$是质数。&lt;/p&gt;
&lt;p&gt;  输入格式：第一行输入$t$，包含$t$组样例，下面每组样例第一行一个$n$，下面一行输入一个长度为$n$的序列$a$。&lt;/p&gt;
&lt;p&gt;  数据范围：$1\leq t\leq 10,1\leq 100000$.&lt;/p&gt;
&lt;p&gt;  输出格式：每个样例对应一行一个输出结果。&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h3 id=&#34;分析&#34;&gt;分析&lt;/h3&gt;
&lt;p&gt;  这一题是偶然在别人博客看到的，几乎没怎么写过数学题，感到这个思路非常非常的巧妙。&lt;/p&gt;
&lt;p&gt;  首先考虑到了$50$以内的素数仅有$15$个，而对于$a$序列中的任意两个数来说，它们的$gcd$要么为$1$，要么在这$15$个素数之中，要么为$1$，如果用二进制表示，那么则有它们二进制表示的与的结果为$0$，或者某一位为$1$(恰好有一个素因子)。对于一个二进制表示$i$来说，我们需要求出它的个数与，它补集的子集个数的乘积，这即是求出了$gcd$为$1$的情况，对于不为$1$的情况，我们求出它与，它的补集对某一位$0$取反变成$1$的所有子集个数在减去它补集没去反之间子集的个数，这二者乘积，对所有的状态进行累加。&lt;/p&gt;
&lt;p&gt;  关键是如何快速求子集个数，对于$i$，求所有的$j$，$j\leq i &amp;amp;&amp;amp;(i|j)==i$。网上代码为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;){&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;){&lt;/span&gt;   
	&lt;span style=&#34;color:#75715e&#34;&gt;//s[i]为i的子集的个数，子集j对应的个数为num[j]     
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#111&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;num&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;];&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;//关键，得到子集 
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;代码&#34;&gt;代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;map&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;ostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;queue&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;set&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stack&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;unordered_map&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#define INF 0x7f7f7f7f
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MAXN 100005
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define N 200005
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define MOD 1000000007
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define P 2
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ll&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;fastIO&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//#define getchar() (p1 == p2 &amp;amp;&amp;amp; (p2 = (p1 = buf) + fread(buf, 1, 1&amp;lt;&amp;lt;22, stdin),
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// p1 == p2) ? EOF : *p1++) char buf[(1 &amp;lt;&amp;lt; 22)], *p1 = buf, *p2 = buf;
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00a8c8&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;read&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;getchar&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#111&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;getchar&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#111&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#d88200&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;getchar&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// namespace fastIO
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;fastIO&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#00a8c8&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;M&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;19&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;29&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;31&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;37&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;41&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;43&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;47&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;};&lt;/span&gt;
                                &lt;span style=&#34;color:#75715e&#34;&gt;//2,3,5,7,11,13,17,19,23,29,31,37,41,43,47
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;cin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#00a8c8&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;memset&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;memset&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;sizeof&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;cin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;ll&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;n&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#111&#34;&gt;cin&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;temp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//x为1时，temp为0
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;temp&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//枚举j二进制表示下的子集
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#111&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;];&lt;/span&gt;
                &lt;span style=&#34;color:#75715e&#34;&gt;//写在这里，是考虑特殊情况，比如输入的x为1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#00a8c8&#34;&gt;break&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;ll&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ans&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;M&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//gcd为1
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#111&#34;&gt;ans&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1ll&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;M&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)];&lt;/span&gt;
            &lt;span style=&#34;color:#75715e&#34;&gt;//gcd为一个素数
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#00a8c8&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#00a8c8&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#00a8c8&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt;
                    &lt;span style=&#34;color:#111&#34;&gt;ans&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1ll&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;M&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;j&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;b&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;M&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;)]);&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#111&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;ans&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#111&#34;&gt;endl&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>https://chagelo.github.io/hugo/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chagelo.github.io/hugo/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://chagelo.github.io/hugo/post/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings&lt;/h2&gt;
&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1 id=&#34;h1&#34;&gt;H1&lt;/h1&gt;
&lt;h2 id=&#34;h2&#34;&gt;H2&lt;/h2&gt;
&lt;h3 id=&#34;h3&#34;&gt;H3&lt;/h3&gt;
&lt;h4 id=&#34;h4&#34;&gt;H4&lt;/h4&gt;
&lt;h5 id=&#34;h5&#34;&gt;H5&lt;/h5&gt;
&lt;h6 id=&#34;h6&#34;&gt;H6&lt;/h6&gt;
&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h2&gt;
&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h4 id=&#34;blockquote-without-attribution&#34;&gt;Blockquote without attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;blockquote-with-attribution&#34;&gt;Blockquote with attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;/p&gt;
— &lt;cite&gt;Rob Pike&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tables&#34;&gt;Tables&lt;/h2&gt;
&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;inline-markdown-within-tables&#34;&gt;Inline Markdown within tables&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Inline   &lt;/th&gt;
&lt;th&gt;Markdown   &lt;/th&gt;
&lt;th&gt;In   &lt;/th&gt;
&lt;th&gt;Table&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;del&gt;strikethrough&lt;/del&gt;   &lt;/td&gt;
&lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;code-blocks&#34;&gt;Code Blocks&lt;/h2&gt;
&lt;h4 id=&#34;code-block-with-backticks&#34;&gt;Code block with backticks&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;html
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;code-block-indented-with-four-spaces&#34;&gt;Code block indented with four spaces&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;code-block-with-hugos-internal-highlight-shortcode&#34;&gt;Code block with Hugo&amp;rsquo;s internal highlight shortcode&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#75af00&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#d88200&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color:#111&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;body&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#111&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&lt;span style=&#34;color:#111&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;list-types&#34;&gt;List Types&lt;/h2&gt;
&lt;h4 id=&#34;ordered-list&#34;&gt;Ordered List&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unordered-list&#34;&gt;Unordered List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nested-list&#34;&gt;Nested list&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Item&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;First Sub-item&lt;/li&gt;
&lt;li&gt;Second Sub-item&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;other-elements--abbr-sub-sup-kbd-mark&#34;&gt;Other Elements — abbr, sub, sup, kbd, mark&lt;/h2&gt;
&lt;p&gt;&lt;abbr title=&#34;Graphics Interchange Format&#34;&gt;GIF&lt;/abbr&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;/sup&gt; + Y&lt;sup&gt;n&lt;/sup&gt; = Z&lt;sup&gt;n&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt;&lt;/kbd&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;/mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&#34;&gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;</description>
    </item>
    
    <item>
      <title>Placeholder Text</title>
      <link>https://chagelo.github.io/hugo/post/placeholder-text/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/placeholder-text/</guid>
      <description>&lt;p&gt;Lorem est tota propiore conpellat pectoribus de
pectora summo.&lt;/p&gt;
&lt;p&gt;Redit teque digerit hominumque toris verebor lumina non cervice
subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc
caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis
lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exierant elisi ambit vivere dedere&lt;/li&gt;
&lt;li&gt;Duce pollice&lt;/li&gt;
&lt;li&gt;Eris modo&lt;/li&gt;
&lt;li&gt;Spargitque ferrea quos palude&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus
silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria
tractus malis.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Comas hunc haec pietate fetum procerum dixit&lt;/li&gt;
&lt;li&gt;Post torum vates letum Tiresia&lt;/li&gt;
&lt;li&gt;Flumen querellas&lt;/li&gt;
&lt;li&gt;Arcanaque montibus omnes&lt;/li&gt;
&lt;li&gt;Quidem et&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;vagus-elidunt&#34;&gt;Vagus elidunt&lt;/h1&gt;
&lt;p&gt;&lt;svg class=&#34;canon&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; overflow=&#34;visible&#34; viewBox=&#34;0 0 496 373&#34; height=&#34;373&#34; width=&#34;496&#34;&gt;&lt;g fill=&#34;none&#34;&gt;&lt;path stroke=&#34;#000&#34; stroke-width=&#34;.75&#34; d=&#34;M.599 372.348L495.263 1.206M.312.633l494.95 370.853M.312 372.633L247.643.92M248.502.92l246.76 370.566M330.828 123.869V1.134M330.396 1.134L165.104 124.515&#34;&gt;&lt;/path&gt;&lt;path stroke=&#34;#ED1C24&#34; stroke-width=&#34;.75&#34; d=&#34;M275.73 41.616h166.224v249.05H275.73zM54.478 41.616h166.225v249.052H54.478z&#34;&gt;&lt;/path&gt;&lt;path stroke=&#34;#000&#34; stroke-width=&#34;.75&#34; d=&#34;M.479.375h495v372h-495zM247.979.875v372&#34;&gt;&lt;/path&gt;&lt;ellipse cx=&#34;498.729&#34; cy=&#34;177.625&#34; rx=&#34;.75&#34; ry=&#34;1.25&#34;&gt;&lt;/ellipse&gt;&lt;ellipse cx=&#34;247.229&#34; cy=&#34;377.375&#34; rx=&#34;.75&#34; ry=&#34;1.25&#34;&gt;&lt;/ellipse&gt;&lt;/g&gt;&lt;/svg&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon&#34;&gt;The Van de Graaf Canon&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mane-refeci-capiebant-unda-mulcebat&#34;&gt;Mane refeci capiebant unda mulcebat&lt;/h2&gt;
&lt;p&gt;Victa caducifer, malo vulnere contra
dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere
furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong&gt;Faces illo pepulere&lt;/strong&gt; tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p&gt;
&lt;p&gt;Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli
Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare
Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert
ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae
vulnus haerentia iuste et exercebat, sui et.&lt;/p&gt;
&lt;p&gt;Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong&gt;mitis temploque&lt;/strong&gt; vocatus, inque alis, &lt;em&gt;oculos nomen&lt;/em&gt; non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem
Propoetides &lt;strong&gt;parte&lt;/strong&gt;.&lt;/p&gt;

&lt;style&gt;
.canon { background: white; width: 100%; height: auto;}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>Emoji Support</title>
      <link>https://chagelo.github.io/hugo/post/emoji-support/</link>
      <pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chagelo.github.io/hugo/post/emoji-support/</guid>
      <description>&lt;p&gt;Emoji can be enabled in a Hugo project in a number of ways.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://gohugo.io/functions/emojify/&#34;&gt;&lt;code&gt;emojify&lt;/code&gt;&lt;/a&gt; function can be called directly in templates or &lt;a href=&#34;https://gohugo.io/templates/shortcode-templates/#inline-shortcodes&#34;&gt;Inline Shortcodes&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To enable emoji globally, set &lt;code&gt;enableEmoji&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in your site’s &lt;a href=&#34;https://gohugo.io/getting-started/configuration/&#34;&gt;configuration&lt;/a&gt; and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙈&lt;/span&gt; &lt;code&gt;:see_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙉&lt;/span&gt; &lt;code&gt;:hear_no_evil:&lt;/code&gt;&lt;/span&gt;  &lt;span class=&#34;nowrap&#34;&gt;&lt;span class=&#34;emojify&#34;&gt;🙊&lt;/span&gt; &lt;code&gt;:speak_no_evil:&lt;/code&gt;&lt;/span&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.emoji-cheat-sheet.com/&#34;&gt;Emoji cheat sheet&lt;/a&gt; is a useful reference for emoji shorthand codes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;N.B.&lt;/strong&gt; The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#272822;background-color:#fafafa;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;.emoji {
font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;style&gt;
.emojify {
	font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols;
	font-size: 2rem;
	vertical-align: middle;
}
@media screen and (max-width:650px) {
    .nowrap {
	display: block;
	margin: 25px 0;
}
}
&lt;/style&gt;</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://chagelo.github.io/hugo/about/</link>
      <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chagelo.github.io/hugo/about/</guid>
      <description>&lt;p&gt;Written in Go, Hugo is an open source static site generator available under the &lt;a href=&#34;https://github.com/gohugoio/hugo/blob/master/LICENSE&#34;&gt;Apache Licence 2.0.&lt;/a&gt; Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.&lt;/p&gt;
&lt;p&gt;Hugo makes use of a variety of open source projects including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuin/goldmark&#34;&gt;https://github.com/yuin/goldmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alecthomas/chroma&#34;&gt;https://github.com/alecthomas/chroma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/muesli/smartcrop&#34;&gt;https://github.com/muesli/smartcrop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;https://github.com/spf13/cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;https://github.com/spf13/viper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.&lt;/p&gt;
&lt;p&gt;Hugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.&lt;/p&gt;
&lt;p&gt;Websites built with Hugo are extremelly fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.&lt;/p&gt;
&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>